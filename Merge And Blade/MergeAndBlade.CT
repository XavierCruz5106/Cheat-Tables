<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Money (Activate when in tetris puzzle)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//aobscanmodule(INJECT,GameAssembly.dll,89 51 24 49 8B F8) // should be unique
define(INJECT, GameAssembly.dll+A9886A)
registersymbol(INJECT)
alloc(newmem,$1000,INJECT)
registersymbol(newmem)
// remove space for some reason and it works
define(pMoney,newmem+100)
registersymbol(pMoney)
label(return)

pMoney:
 dd 0


newmem:
  mov [rcx+24], edx
  mov [pMoney],rcx
  mov rdi,r8
  jmp return

INJECT:
  jmp newmem
  nop
return:

[DISABLE]

INJECT:
  db 89 51 24 49 8B F8

unregistersymbol(INJECT)
unregistersymbol(newmem)
unregistersymbol(pMoney)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+A9886A

GameAssembly.dll+A98851: C3                    - ret 
GameAssembly.dll+A98852: 48 8B D3              - mov rdx,rbx
GameAssembly.dll+A98855: 48 8B CF              - mov rcx,rdi
GameAssembly.dll+A98858: E8 23 14 71 FF        - call GameAssembly.dll+1A9C80
GameAssembly.dll+A9885D: CC                    - int 3 
GameAssembly.dll+A9885E: CC                    - int 3 
GameAssembly.dll+A9885F: CC                    - int 3 
GameAssembly.dll+A98860: 48 89 5C 24 08        - mov [rsp+08],rbx
GameAssembly.dll+A98865: 57                    - push rdi
GameAssembly.dll+A98866: 48 83 EC 20           - sub rsp,20
// ---------- INJECTING HERE ----------
GameAssembly.dll+A9886A: 89 51 24              - mov [rcx+24],edx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+A9886D: 49 8B F8              - mov rdi,r8
GameAssembly.dll+A98870: 49 8B 40 18           - mov rax,[r8+18]
GameAssembly.dll+A98874: 48 8B D9              - mov rbx,rcx
GameAssembly.dll+A98877: 48 8B 90 C0 00 00 00  - mov rdx,[rax+000000C0]
GameAssembly.dll+A9887E: 48 8B 02              - mov rax,[rdx]
GameAssembly.dll+A98881: 48 8B D0              - mov rdx,rax
GameAssembly.dll+A98884: FF 10                 - call qword ptr [rax]
GameAssembly.dll+A98886: 48 8B 4B 28           - mov rcx,[rbx+28]
GameAssembly.dll+A9888A: 48 85 C9              - test rcx,rcx
GameAssembly.dll+A9888D: 74 17                 - je GameAssembly.dll+A988A6
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Infinite Money"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

//aobscanmodule(money,GameAssembly.dll,89 51 24 49 8B F8) // should be unique
define(money, "GameAssembly.dll"+A9886A)
alloc(newmem,$1000,money)

label(code)
label(return)

newmem:

code:
  mov [rcx+24], #9999999
  mov rdi,r8
  jmp return

money:
  jmp newmem
  nop
return:
registersymbol(money)

[DISABLE]

money:
  db 89 51 24 49 8B F8

unregistersymbol(money)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 7FFB3424886A

7FFB34248851: C3                    - ret 
7FFB34248852: 48 8B D3              - mov rdx,rbx
7FFB34248855: 48 8B CF              - mov rcx,rdi
7FFB34248858: E8 23 14 71 FF        - call 7FFB33959C80
7FFB3424885D: CC                    - int 3 
7FFB3424885E: CC                    - int 3 
7FFB3424885F: CC                    - int 3 
7FFB34248860: 48 89 5C 24 08        - mov [rsp+08],rbx
7FFB34248865: 57                    - push rdi
7FFB34248866: 48 83 EC 20           - sub rsp,20
// ---------- INJECTING HERE ----------
7FFB3424886A: 89 51 24              - mov [rcx+24],edx
// ---------- DONE INJECTING  ----------
7FFB3424886D: 49 8B F8              - mov rdi,r8
7FFB34248870: 49 8B 40 18           - mov rax,[r8+18]
7FFB34248874: 48 8B D9              - mov rbx,rcx
7FFB34248877: 48 8B 90 C0 00 00 00  - mov rdx,[rax+000000C0]
7FFB3424887E: 48 8B 02              - mov rax,[rdx]
7FFB34248881: 48 8B D0              - mov rdx,rax
7FFB34248884: FF 10                 - call qword ptr [rax]
7FFB34248886: 48 8B 4B 28           - mov rcx,[rbx+28]
7FFB3424888A: 48 85 C9              - test rcx,rcx
7FFB3424888D: 74 17                 - je 7FFB342488A6
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Custom Money (Change money to populate)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>[pMoney]+24</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Turns (Activate when in tetris puzzle)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//aobscanmodule(INJECT,GameAssembly.dll,FF 48 1C 48 8B 0D EF AD DE 00) // should be unique
define(INJECT, GameAssembly.dll+57195F)
registersymbol(INJECT)
alloc(newmem,$1000,INJECT)
registersymbol(newmem)
define(pTurn,newmem+100)
registersymbol(pTurn)
label(return)

pTurn:
 dd 0


newmem:
  mov [pTurn], rax
  dec [rax+1C]
  mov rcx,[7FFB34B0C758]
  jmp return



INJECT:
  jmp newmem
  nop 5
return:

[DISABLE]

INJECT:
  db FF 48 1C 48 8B 0D EF AD DE 00

unregistersymbol(INJECT)
unregistersymbol(newmem)
unregistersymbol(pTurn)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 7FFB33D2195F

7FFB33D2192C: 41 89 5E 10           - mov [r14+10],ebx
7FFB33D21930: 48 8B 05 E1 D9 DD 00  - mov rax,[7FFB34AFF318]
7FFB33D21937: F6 80 33 01 00 00 04  - test byte ptr [rax+00000133],04
7FFB33D2193E: 74 18                 - je 7FFB33D21958
7FFB33D21940: 44 39 B8 E0 00 00 00  - cmp [rax+000000E0],r15d
7FFB33D21947: 75 0F                 - jne 7FFB33D21958
7FFB33D21949: 48 8B C8              - mov rcx,rax
7FFB33D2194C: E8 1F BD BB FF        - call GameAssembly.il2cpp_runtime_class_init
7FFB33D21951: 48 8B 05 C0 D9 DD 00  - mov rax,[7FFB34AFF318]
7FFB33D21958: 48 8B 80 B8 00 00 00  - mov rax,[rax+000000B8]
// ---------- INJECTING HERE ----------
7FFB33D2195F: FF 48 1C              - dec [rax+1C]
// ---------- DONE INJECTING  ----------
7FFB33D21962: 48 8B 0D EF AD DE 00  - mov rcx,[7FFB34B0C758]
7FFB33D21969: E8 32 2B 4D 00        - call 7FFB341F44A0
7FFB33D2196E: 48 85 C0              - test rax,rax
7FFB33D21971: 0F 84 78 0B 00 00     - je 7FFB33D224EF
7FFB33D21977: 44 88 78 40           - mov [rax+40],r15b
7FFB33D2197B: 48 8B 0D C6 8A DC 00  - mov rcx,[7FFB34AEA448]
7FFB33D21982: E8 F9 A4 CB FF        - call 7FFB339DBE80
7FFB33D21987: 48 8B 0D B2 B5 DC 00  - mov rcx,[7FFB34AECF40]
7FFB33D2198E: 48 8B D8              - mov rbx,rax
7FFB33D21991: E8 5A 88 C3 FF        - call 7FFB3395A1F0
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Custom Turn. (Use a turn first to populate values)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>[pTurn]+1C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Infinite Turns"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

//aobscanmodule(infTurns,GameAssembly.dll,FF 48 1C 48 8B 0D EF AD DE 00) // should be unique
define(infTurns, GameAssembly.dll+57195F)
alloc(newmem,$1000,infTurns)

label(code)
label(return)

newmem:

code:
  mov [rax+1C], #9999999
  //dec [rax+1C]
  mov rcx,[7FFB34B0C758]
  jmp return

infTurns:
  jmp newmem
  nop 5
return:
registersymbol(infTurns)

[DISABLE]

infTurns:
  db FF 48 1C 48 8B 0D EF AD DE 00

unregistersymbol(infTurns)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 7FFB33D2195F

7FFB33D2192C: 41 89 5E 10           - mov [r14+10],ebx
7FFB33D21930: 48 8B 05 E1 D9 DD 00  - mov rax,[7FFB34AFF318]
7FFB33D21937: F6 80 33 01 00 00 04  - test byte ptr [rax+00000133],04
7FFB33D2193E: 74 18                 - je 7FFB33D21958
7FFB33D21940: 44 39 B8 E0 00 00 00  - cmp [rax+000000E0],r15d
7FFB33D21947: 75 0F                 - jne 7FFB33D21958
7FFB33D21949: 48 8B C8              - mov rcx,rax
7FFB33D2194C: E8 1F BD BB FF        - call GameAssembly.il2cpp_runtime_class_init
7FFB33D21951: 48 8B 05 C0 D9 DD 00  - mov rax,[7FFB34AFF318]
7FFB33D21958: 48 8B 80 B8 00 00 00  - mov rax,[rax+000000B8]
// ---------- INJECTING HERE ----------
7FFB33D2195F: FF 48 1C              - dec [rax+1C]
// ---------- DONE INJECTING  ----------
7FFB33D21962: 48 8B 0D EF AD DE 00  - mov rcx,[7FFB34B0C758]
7FFB33D21969: E8 32 2B 4D 00        - call 7FFB341F44A0
7FFB33D2196E: 48 85 C0              - test rax,rax
7FFB33D21971: 0F 84 78 0B 00 00     - je 7FFB33D224EF
7FFB33D21977: 44 88 78 40           - mov [rax+40],r15b
7FFB33D2197B: 48 8B 0D C6 8A DC 00  - mov rcx,[7FFB34AEA448]
7FFB33D21982: E8 F9 A4 CB FF        - call 7FFB339DBE80
7FFB33D21987: 48 8B 0D B2 B5 DC 00  - mov rcx,[7FFB34AECF40]
7FFB33D2198E: 48 8B D8              - mov rbx,rax
7FFB33D21991: E8 5A 88 C3 FF        - call 7FFB3395A1F0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Turns Dont Decrease"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

//aobscanmodule(turns,GameAssembly.dll,FF 48 1C 48 8B 0D EF AD DE 00) // should be unique
define(turns, "GameAssembly.dll"+57195F)
alloc(newmem,$1000,turns)

label(code)
label(return)

newmem:

code:
  nop
  mov rcx,[7FFB34B0C758]
  jmp return

turns:
  jmp newmem
  nop 5
return:
registersymbol(turns)

[DISABLE]

turns:
  db FF 48 1C 48 8B 0D EF AD DE 00

unregistersymbol(turns)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 7FFB33D2195F

7FFB33D2192C: 41 89 5E 10           - mov [r14+10],ebx
7FFB33D21930: 48 8B 05 E1 D9 DD 00  - mov rax,[7FFB34AFF318]
7FFB33D21937: F6 80 33 01 00 00 04  - test byte ptr [rax+00000133],04
7FFB33D2193E: 74 18                 - je 7FFB33D21958
7FFB33D21940: 44 39 B8 E0 00 00 00  - cmp [rax+000000E0],r15d
7FFB33D21947: 75 0F                 - jne 7FFB33D21958
7FFB33D21949: 48 8B C8              - mov rcx,rax
7FFB33D2194C: E8 1F BD BB FF        - call GameAssembly.il2cpp_runtime_class_init
7FFB33D21951: 48 8B 05 C0 D9 DD 00  - mov rax,[7FFB34AFF318]
7FFB33D21958: 48 8B 80 B8 00 00 00  - mov rax,[rax+000000B8]
// ---------- INJECTING HERE ----------
7FFB33D2195F: FF 48 1C              - dec [rax+1C]
// ---------- DONE INJECTING  ----------
7FFB33D21962: 48 8B 0D EF AD DE 00  - mov rcx,[7FFB34B0C758]
7FFB33D21969: E8 32 2B 4D 00        - call 7FFB341F44A0
7FFB33D2196E: 48 85 C0              - test rax,rax
7FFB33D21971: 0F 84 78 0B 00 00     - je 7FFB33D224EF
7FFB33D21977: 44 88 78 40           - mov [rax+40],r15b
7FFB33D2197B: 48 8B 0D C6 8A DC 00  - mov rcx,[7FFB34AEA448]
7FFB33D21982: E8 F9 A4 CB FF        - call 7FFB339DBE80
7FFB33D21987: 48 8B 0D B2 B5 DC 00  - mov rcx,[7FFB34AECF40]
7FFB33D2198E: 48 8B D8              - mov rbx,rax
7FFB33D21991: E8 5A 88 C3 FF        - call 7FFB3395A1F0
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
